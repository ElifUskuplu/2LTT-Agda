{-# OPTIONS --without-K --two-level  #-}

module 2LTT.Exotypes.Naturals where

open import 2LTT.Primitive

--EXO-UNIVERSE--
----------------------------------------------------------
--Natural Numbers Exotype(ℕᵉ) 
data ℕᵉ : UUᵉ lzero where
     zeroᵉ : ℕᵉ
     succᵉ : ℕᵉ → ℕᵉ

--induction principle for ℕᵉ
ind-ℕᵉ : {i : Level} {P : ℕᵉ → UUᵉ i} → P zeroᵉ → ((n : ℕᵉ) → P n → P(succᵉ n)) → ((n : ℕᵉ) → P n)
ind-ℕᵉ P0 PS zeroᵉ = P0
ind-ℕᵉ P0 PS (succᵉ y) = PS y (ind-ℕᵉ P0 PS y)

---------------------------------------------------
--UNIVERSE--
----------------------------------------------------------
--Natural Numbers Type(ℕ)
data ℕ : UU lzero where
     zero : ℕ
     succ : ℕ → ℕ

--induction principle for ℕ
ind-ℕ : {i : Level} {P : ℕ → UU i} → P zero → ((n : ℕ) → P n → P(succ n)) → ((n : ℕ) → P n)
ind-ℕ P0 PS zero = P0
ind-ℕ P0 PS (succ y) = PS y (ind-ℕ P0 PS y)

---------------------------------------------------
